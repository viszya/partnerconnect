generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sendToEmail   String?
  department    String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

// model Company {
//   id                       String                   @id @default(cuid())
//   companyName              String
//   image                    String?
//   progress                 Int                      @default(0)
//   industry                 String?
//   description              String?
//   partner                  Boolean                  @default(false)
//   address                  String?
//   phoneNumber              String?
//   email                    String?
//   website                  String?
//   district                 String?
//   createdAt                DateTime                 @default(now()) @map(name: "created_at")
//   userId                   String?
//   status                   String?
//   typeOfOrganization       String?
//   industryOrSector         String?
//   sizeEmployees            String?
//   historyBackground        String?
//   missionStatementVision   String?
//   targetMarketCustomerBase String?
//   facebook                 String?
//   twitter                  String?
//   linkedin                 String?
//   mainProduct              String?
//   descriptionOfProducts    String?
//   financialsRevenueModel   String?
//   companyValuesCulture     String?
//   award1Name               String?
//   award1Description        String?
//   award2Name               String?
//   award2Description        String?
//   testimonial1Name         String?
//   testimonial1Description  String?
//   testimonial2Name         String?
//   testimonial2Description  String?
//   name1                    String?
//   position1                String?
//   phoneNumber1             String?
//   email1                   String?
//   avatarImage1             String?
//   name2                    String?
//   position2                String?
//   phoneNumber2             String?
//   email2                   String?
//   avatarImage2             String?
//   name3                    String?
//   position3                String?
//   phoneNumber3             String?
//   email3                   String?
//   avatarImage3             String?
//   listOfProductsServices   listOfProductsServices[]
//   tags                     Tags[]
//   user                     User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model Tags {
//   id        String   @id @default(cuid())
//   name      String
//   companyId String?
//   company   Company? @relation(fields: [companyId], references: [id])
// }

// model listOfProductsServices {
//   id        String   @id @default(cuid())
//   name      String
//   companyId String?
//   company   Company? @relation(fields: [companyId], references: [id])
// }
