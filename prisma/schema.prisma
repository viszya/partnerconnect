generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sendToEmail   String?
  department    String?
  accounts      Account[]
  sessions      Session[]
  company     Company[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model Company {
  id                        String                @id @default(cuid())
  nID                       String?
  name                      String?
  avatar                    String?
  status                    String?
  partner                   String?
  typeOfOrganization        String?
  industry                  String?
  size                      String?
  historyBackground         String?
  missionStatementVision    String?
  targetMarketCustomerBase  String?
  product                   String?
  descriptionOfProducts     String?
  financialsRevenueModel    String?
  companyValuesCulture      String?
  tags                      String[]
  listOfProductsServices    String[]
  companyContactInformation ContactInformation[]
  keyPersonnel              KeyPersonnel[]
  socialMediaProfiles       SocialMediaProfiles[]
  awardsRecognitions        AwardsRecognition[]
  customerTestimonials      CustomerTestimonial[]
  User                   User?                @relation(fields: [userId], references: [id])
  userId                 String?
}

model ContactInformation {
  id             Int          @id @default(autoincrement())
  address        String?
  phoneNumber    String?
  email          String?
  website        String?
  district       String?
  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
}

model KeyPersonnel {
  id             Int          @id @default(autoincrement())
  name           String?
  position       String?
  phoneNumber    String?
  email          String?
  avatarImage    String?
  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
}

model SocialMediaProfiles {
  id             Int          @id @default(autoincrement())
  facebook       String?
  twitter        String?
  linkedin       String?
  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
}

model AwardsRecognition {
  id             Int          @id @default(autoincrement())
  title          String?
  description    String?
 company    Company @relation(fields: [companyId], references: [id])
  companyId  String
}

model CustomerTestimonial {
  id             Int          @id @default(autoincrement())
  clientName     String?
  feedback       String?
  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
}
